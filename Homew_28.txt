1․ Գրել BankUser class, որը․
   - __init__() -ում կընդունի մարդու անունը, ազգանունը, տարիքը, հաշվեհամարը, գումարը հաշվեհամարի վրա, գաղտնաբառը,
   - մինչ ինիցիալիզացնելը, կստուգի, որ ընդունված արգումենտները ճիշտ են մուտքագրված՝
     -- անունը և ազգանունը - տառերից բաղկացած,
     -- տարիքը - ամբողջ թիվ,
     -- հաշվեհամարը - 16 թվանշանից բաղկացած (xxxx xxxx xxxx xxxx կամ xxxxxxxxxxxxxxxx ֆորմատով),
     -- գումարը - դրական թիվ,
     -- գաղտնաբառը - ամենաքիչը 8 սիմվոլից բաղկացած տեքստ,
   - անունը, ազգանունը և տարիքը կլինեն այնպիսի ատրիբուտներ, որոնց ուղիղ հասանելիությունը կլինի պաշտպանված,
   - հաշվեհամարը, գումարը և գաղտնաբառը կլինեն այնպիսի ատրիբուտներ, որոնց ուղիղ հասանելիությունը կլինի արգելված,   
   - կունենա մեթոդ, որը կվերադարձնի մարդու անունը և ազգանունը,
   - կունենա մեթոդ, որը կվերադարձd նի մարդու տարիքը,
   - կունենա մեթոդ, որը կվերադարձնի հաշվեհամարը և գումարը, բայց միայն ճիշտ գաղտնաբառ հավաքելուց հետո,
   - կունենա մեթոդ, որը կավելացնի գումար հաշվին,
   - կունենա մեթոդ, որը կհանի գումար հաշվից, հաշվի առեք, որ գումարը բացասական չի կարող լինել։

class BankUser:
    def __init__(self, name, surname, age, card, balance, password):
        if name.isalpha() and surname.isalpha() and int(age) \
                and len(card) == 16 and balance > 0 and \
                len(password) > 8:
            self._name = name         # protected
            self._surname = surname   # protected
            self._age = age           # protected
            self.__card = card         # private
            self.__balance = balance   # private
            self.__password = password  # private
        else:
            raise Exception('Invalid arguments')

    def __str__(self):
        return f"Name: {self._name} \nSurname: {self._surname}"

    def aging(self):
        return f"Age: {self._age}"

    def account(self):
        passw = input('Enter Your Password ')
        if passw == self.__password:
            return f"Card: {self.__card} \nBalance = ${self.__balance}"
        else:
            raise Exception('Invalid password.')

    def addition(self, amount):
        if amount:
            self.__balance += amount
            print('Balance = $', self.__balance)

    def withdrawal(self, money):
        if money:
            self.__balance -= money
            if self.__balance < 0:
                raise Exception('Insufficient means')
            else:
                print('Balance = $', self.__balance)



user1 = BankUser('Neo', 'Kasparyan', 34, '1452623457890012', 70000, 'new234or@')
print(user1)
print(user1.aging())
print(user1.account())
print(user1.addition(5000))
print(user1.withdrawal(30000))

